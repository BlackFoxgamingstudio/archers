---
layout: default.hbs
title: Backend in Python
slug: backend-in-python
date: 2013-05-21
lead: "Post describes my reasoning behind selecting Python and Python-based tools for implementation of the server component for the Archers! game."
base_url: "../"
---

<p>While I was happy to use Playcraft for browser-side rendering of the game, I wanted something solid, fast and stable to maintain the current state of the game on the server end. I realised it didn't have to be JS-based and started looking into asynchroneus Python and WebSockets support. I quickly landed on <a href="http://twistedmatrix.com/trac/" target="_blank">Twisted</a> for event-driven, asynchroneus engine and <a href="http://autobahn.ws/python/" target="_blank">Autobahn</a> completed the picture with easy but comprehensive support for the WebSockets protocol.</p>

<p>I'll also need something to open and process maps in TMX format, currently my eyese are on <a href="https://github.com/encukou/pytmxlib" target="_blank">pytmxlib</a> which does just that and nothing else. There are more commonly used alternatives, however these usually come tightly coupled with a rendering engine such as <a href="http://www.pygame.org/" target="_blank">pygame</a> which doesn't make sense as I want my server to be capable of running headless in production. For development however, a very simple method of picturing current state of the game will be useful - pygame might be just what I need for a debug renderer.</p>