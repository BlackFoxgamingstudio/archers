---
layout: default.hbs
title: Handling network messaging
slug: handling-network-messaging
date: 2013-07-05
lead: "Few thoughs on client-server interaction in a multiplayer, web-based game. Optimisation of the Web Sockets traffic using schema-based binary protocol"
base_url: "../"
---

<p>I've came up with some basic rules on how to implement the networking for my multiplayer, web-based game:</p>

<ul>
	<li>Server always has the most up-to-date state of the game</li>
	<li>Real-time communication is sent over Web Sockets</li>
	<li>Physics, collisions etc. happens only on the server side, client just gets dummy position updates. This might not work for a dynamic, 3D FPS but will do just fine for a 2D action game</li>
	<li>Don't do anything too clever on the frontend. It should render the output and relay the input.</li>
	<li>Never trust the client, verify all data coming from the client and discard anything that doesn't check out</li>
	<li>Very small frames containing only relevant changes in a compacted form will be sent the clients as often as feasible. Initially aiming for 20 frames a second</li>
	<li>Larger updates containing state of the game or info about new player joining sent as required to the clients - still in a compacted form</li>
	<li>Meta information (e.g. player name change, game score) sent in a separate message as rarely as possible (this messages will be larger) </li>
	<li>Client sends compact messages based on user input (move/attack etc.) and meta messages (change character name) as required</li>
	<li>To make the experience smoother, client might do some extrapolation (predicting the movement) or interpolation (drawing movement between 2 frames). This will require further research.</li>
</ul>

<p>As you can see above, I would like to use compact messages for the most common client-server traffic. I would like to use just few bytes of data per frame and luckilly Web Sockets specification allows for sending binary data. It's a relatively new feature but is supported by all the modern browsers (Chrome 15+, Firefox 11+, Internet Explorer 10, and Safari nightly). Luckily my backend framework (Autobahn) is capable of sending and receiving binary messages over Web Socket.</p>

<p>To keep the message size to the minimum, I've devised a schema-based, binary protocol. Client and server will need a small JSON file listing all the possible messages as well as details on how to read/build each individual message. For example a simple frame message would consist of four unsigned integers, first representing message id (so that decoder can pull up correct schema), second and third representing X and Y coordinates of the character and fourth representing unique character id. Since each integer requires 4 bytes, the frame message as specified above would require a total of 16 bytes. Much less than the equivalent message sent as JSON.</p>

<p>I haven't been able to find any open-source library that support efficient messaging over Web Sockets as described above. Once the game is release I hope to release the part of code that does message encoding &amp; decoding as a stand-alone library</p>
